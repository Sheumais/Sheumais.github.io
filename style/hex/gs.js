functionConvexHullGrahamScan(){this.anchorPoint=undefined;this.reverse=false;this.points=[];}ConvexHullGrahamScan.prototype={constructor:ConvexHullGrahamScan,Point:function(x,y){this.x=x;this.y=y;}, _findPolarAngle:function(a,b){ varONE_RADIAN=57.295779513082; vardeltaX=(b.x-a.x); vardeltaY=(b.y-a.y); if(deltaX==0&&deltaY==0){ return0; } varangle=Math.atan2(deltaY,deltaX)*ONE_RADIAN; if(this.reverse){ if(angle<=0){ angle+=360; } }else{ if(angle>=0){ angle+=360; } } returnangle; }, addPoint:function(x,y){if(this.anchorPoint===undefined){this.anchorPoint=newthis.Point(x,y); }elseif(this.anchorPoint.y>y||(this.anchorPoint.y==y&&this.anchorPoint.x>x)){ this.anchorPoint.y=y; this.anchorPoint.x=x; this.points.unshift(newthis.Point(x,y)); return; } this.points.push(newthis.Point(x,y)); }, _sortPoints:function(){ varself=this; returnthis.points.sort(function(a,b){ varpolarA=self._findPolarAngle(self.anchorPoint,a); varpolarB=self._findPolarAngle(self.anchorPoint,b); if(polarA<polarB){ return-1; } if(polarA>polarB){ return1; } return0; }); }, _checkPoints:function(p0,p1,p2){ vardifAngle; varcwAngle=this._findPolarAngle(p0,p1); varccwAngle=this._findPolarAngle(p0,p2); if(cwAngle>ccwAngle){ difAngle=cwAngle-ccwAngle; return!(difAngle>180); }elseif(cwAngle<ccwAngle){ difAngle=ccwAngle-cwAngle; return(difAngle>180); } returnfalse; }, getHull:function(){ varhullPoints=[], points, pointsLength; this.reverse=this.points.every(function(point){ return(point.x<0&&point.y<0); }); points=this._sortPoints(); pointsLength=points.length; if(pointsLength<4){ returnpoints; } hullPoints.push(points.shift(),points.shift()); while(true){ varp0, p1, p2; hullPoints.push(points.shift()); p0=hullPoints[hullPoints.length-3]; p1=hullPoints[hullPoints.length-2]; p2=hullPoints[hullPoints.length-1]; if(this._checkPoints(p0,p1,p2)){ hullPoints.splice(hullPoints.length-2,1); } if(points.length==0){ if(pointsLength==hullPoints.length){ returnhullPoints; } points=hullPoints; pointsLength=points.length; hullPoints=[]; hullPoints.push(points.shift(),points.shift()); } } } }; if(typeofdefine==='function'&&define.amd){ define(function(){ returnConvexHullGrahamScan; }); } if(typeofmodule!=='undefined'){ module.exports=ConvexHullGrahamScan;}
